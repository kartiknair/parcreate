#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const cp = require("child_process");

const chalk = require("chalk");
const ora = require("ora");

const directorySpinner = ora("Creating Directory...");
const packageSpinner = ora("Creating package.json...");
const installSpinner = ora("Installing modules...");

const dir = process.argv[2];
const npm = process.platform === "win32" ? "npm.cmd" : "npm";

const initContent = {
  html: `<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Parcel & React</title>
    </head>
    <body>
        <div id="root"></div>
        <script src="./index.js"></script>
    </body>
</html>
`,
  js: `import React from "react";
import ReactDom from "react-dom";
import "./index.css";

const App = () => <h1>Hello World</h1>;

ReactDom.render(<App />, document.getElementById("root"));
  `,
  css: `* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
}

code {
  font-family: "Courier New", Courier, monospace;
}
`,
  gitignore: `# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2

.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.pnp.*  
`
};

if (!dir) console.log(chalk.redBright("Error: No directory specified"));
else {
  if (fs.existsSync(dir)) {
    console.log(chalk.redBright("Error: Directory already exists"));
  } else {
    directorySpinner.start();
    fs.mkdirSync(dir);
    directorySpinner.succeed();
    const packageJson = {
      name: dir,
      version: "1.0.0",
      description: "",
      main: "index.js",
      scripts: {
        start: "parcel src/index.html",
        build: "parcel build src/index.html"
      },
      keywords: [],
      author: "",
      license: "ISC",
      dependencies: {
        react: "^16.13.1",
        "react-dom": "^16.13.1",
        "react-intl": "^4.3.1"
      },
      devDependencies: {
        "@babel/core": "^7.9.0",
        "@babel/preset-env": "^7.9.0",
        "@babel/preset-react": "^7.9.4",
        "parcel-bundler": "^1.12.4"
      }
    };

    packageSpinner.start();
    fs.writeFileSync(
      path.join(dir, "package.json"),
      JSON.stringify(packageJson)
    );
    packageSpinner.succeed();

    installSpinner.start();

    const result = cp.spawn(npm, ["install"], {
      cwd: dir
    });

    result.on("close", code => {
      if (code === 0) {
        const babelConfig = {
          presets: ["@babel/preset-react"]
        };

        fs.writeFileSync(
          path.join(dir, ".babelrc"),
          JSON.stringify(babelConfig)
        );
        fs.writeFileSync(path.join(dir, ".gitignore"), initContent.gitignore);

        fs.mkdirSync(path.join(dir, "src"));
        fs.writeFileSync(path.join(dir, "src", "index.html"), initContent.html);
        fs.writeFileSync(path.join(dir, "src", "index.js"), initContent.js);
        fs.writeFileSync(path.join(dir, "src", "index.css"), initContent.css);

        installSpinner.succeed();
        console.log(chalk.white("Done installing successfully"));
        console.log(
          chalk.white("\nYou can run the following commands to get started")
        );

        console.log(chalk.cyan("\ncd " + dir));
        console.log(chalk.cyan("\nnpm start"));
        console.log(chalk.white("\nHave fun!"));
      } else {
        console.log(
          "Code was not number 0 rather it was: " +
            code +
            " with type of " +
            typeof code
        );
        installSpinner.fail();
      }
    });
  }
}
